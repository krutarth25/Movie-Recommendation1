# -*- coding: utf-8 -*-
"""Movie Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ArdsjONqA-QVMqLgyIhN6Edqc6hajUx

# **Movie Recommendation System**

Recomender Sysytem is a system that seeks to predict or filter preferences according to user's choice. Recommender Systems produce list of recommendation in any of the two ways-

collaborative filtering: Collabrates filtering approaches build a model from user's past behaviour as well as similar decisions made by users.

content base filtering: Content based filtering aprroache uses a series of 
discrete characteristics of item in order to recommeded additional item with similar properties.
"""



"""# **Import Library**"""

import pandas as pd

import numpy as np

"""# **Import Dataset**"""

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/blob/main/Movies%20Recommendation.csv?raw=true')

df.head()

df.info()

df.shape

df.columns

"""# **Get Feature Selection**"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

x = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' ' + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']

x

x.shape

"""# **Get Feature Text Conversion to Tokens**


"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""# Get Similarity Score using Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(x)

Similarity_Score

"""# Get Movie Name as Input from User and Validate for Closet Spelling"""

Favourite_Movie_Name = input('Enter your favourite movie name :')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

from ast import Index
Index_of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

#Getting a list of similar movies
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""# Get All Movies Sort Based on Recommendation Score wrt Favourite Movie"""

# Sorting the movies based on their similarity score

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

# Print the name of similar movies based on the index

print('Top 30 Movie Suggested for you: \n')

i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1

"""# Top 10 Movies Recommendation System"""

Movie_Name = input('Enter Your Favourite Movie Name: ')

list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 Movies Suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if (i<11):
    print(i, '.',title_from_index)
    i+=1